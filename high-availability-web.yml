Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: "UdacityProject"

    LatestAMI:
        Description: Latest Ubuntu 18.04 AMI for the Region (us-west-2)
        Type: String
        Default: "ami-003634241a8fcdec0"

    InstanceType:
        Description: InstantType for AutoScalingGroup Launch Configuration
        Type: String
        Default: "t3.small"
        
Resources:         
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    
    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              SourceSecurityGroupId: !Ref LBSecurityGroup
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
    
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            # we install our web server with user data
            UserData: 
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip
            ImageId: !Ref LatestAMI #Ubuntu 18.04 (64-bit x86)
            SecurityGroups:
            - Ref: WebServerSecurityGroup
            InstanceType: !Ref InstanceType
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: 10
    
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: 2
            MaxSize: 4
            TargetGroupARNs:
            - Ref: WebAppTargetGroup
    
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecurityGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    ScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName: !Ref WebAppGroup
            Cooldown: '1'
            PolicyType: TargetTrackingScaling
            ScalingAdjustment: '1'
            
    CPUAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '40'
            AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down    
            Period: '60'
            AlarmActions:
            - Ref: ScaleUpPolicy
            Namespace: AWS/EC2
            Dimensions:
            - Name: AutoScalingGroupName
              Value: !Ref WebAppGroup
            ComparisonOperator: GreaterThanThreshold
            MetricName: CPUUtilization

    # use ssm to install application on private subnet instead of bastion host on public subnet
    # ssm agent already installed on ubuntu 18.04
    UdacityEC2Role:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: "Allow"
                  Principal:
                    Service: ["ec2.amazonaws.com"]
                  Action: "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
                - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
                - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'

    #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Roles:
            -  !Ref UdacityEC2Role

Outputs: 
    LoadBalancerDNSName:
        Description: The DNSName of the load balancer
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-DNS-NAME

    WebServerSecurityGroup:
        Description: Reference for RDS DB
        Value: !Ref WebServerSecurityGroup
        Export:
            Name: !Sub ${EnvironmentName}-WebServer-SG
    